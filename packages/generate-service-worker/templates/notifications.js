/*
 * AUTOGENERATED FROM GENERATE-SERVICE-WORKER
 * Injected Global: $Notifications, $Log
 */

'use strict';

/*         -------- NOTIFICATIONS CONSTANTS ---------         */

self.addEventListener('push', handleNotificationPush);
self.addEventListener('notificationclick', handleNotificationClick);

if (!$Cache) {
  self.addEventListener('install', (event) => {
    event.waitUntil(self.skipWaiting());
  });
}

/*         -------- NOTIFICATIONS HANDLERS ---------         */

function handleNotificationPush(event) {
  logger.log('Push notification received', event);

  if ($Log.notificationReceived) {
    event.waitUntil(logNotificationReceived(event));
  }

  // Show notification or fallback
  if (event.data && event.data.title) {
    event.waitUntil(showNotification(event.data));
  } else {
    logger.warn('Cannot show notification with no data property. Using default.');
    event.waitUntil(showNotification($Notifications.default));
  }
}

function handleNotificationClick(event) {
  logger.log('Push notification clicked.', event.notification);

  if ($Log.notificationClicked) {
    event.waitUntil(logNotificationClick(event));
  }

  // Open the url if provided
  if (event.notification.data && event.notification.data.url) {
    const url = event.notification.data.url;
    event.waitUntil(clients.openWindow(url));
  } else {
    logger.warn('Cannot route click with no data.url property. Using "/".');
    event.waitUntil(clients.openWindow('/'));
  }

  event.notification.close();
}

/*         -------- NOTIFICATIONS HELPERS ---------         */

function showNotification(data) {
  logger.log('Attempting to show notification: ', data);
  return self.registration
    .showNotification(data.title, data)
    .then(delayDismissNotification);
}

function delayDismissNotification() {
  if ($Notifications.duration) {
    setTimeout(function serviceWorkerDismissNotification() {
      logger.log('Hiding notification after delay: ', $Notifications.duration);
      self.registration.getNotifications()
        .then(notifs => notifs.forEach(notif => notif.close()));
    }, $Notifications.duration);
  }
}

function logNotificationReceived(event) {
  return logAction(event, $Log.notificationReceived);
}

function logNotificationClick(event) {
  return logAction(event.notification, $Log.notificationClicked);
}

function logAction(notification, url) {
  return self.registration.pushManager.getSubscription().then((subscription) => {
    const query = {
      endpoint: subscription.endpoint,
      tag: notification.tag
    };
    return fetch(formatUrl(url, query), { credentials: 'include' });
  });
}

function formatUrl(url, queries) {
  const prefix = url.includes('?') ? '&' : '?';
  const query = Object.keys(queries).map(function (key) {
    return `${key}=${queries[key]}`;
  }).join('&');
  return url + prefix + query;
}

// Export functions on the server for testing
if (typeof __TEST_MODE__ !== 'undefined') {
  module.exports = {
    handleNotificationPush: handleNotificationPush,
    handleNotificationClick: handleNotificationClick,
    showNotification: showNotification,
    delayDismissNotification: delayDismissNotification,
    logNotificationReceived: logNotificationReceived,
    logNotificationClick: logNotificationClick,
    logAction: logAction,
    formatUrl: formatUrl
  };
}
